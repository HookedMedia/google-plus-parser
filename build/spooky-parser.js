// Generated by CoffeeScript 1.7.1
(function() {
  var config, path;

  path = require("path");

  config = require(path.join(__dirname, "config"));

  module.exports = function(url, pages) {
    var Spooky, spooky;
    Spooky = require("spooky");
    spooky = new Spooky({
      child: {
        transport: "http"
      },
      casper: {
        logLevel: "debug",
        verbose: true,
        clientScripts: ['bower_components/jquery/dist/jquery.js', 'build/latest.js', 'build/parser.js']
      }
    }, function(err) {
      var e;
      if (err) {
        e = new Error("Failed to initialize SpookyJS");
        e.details = err;
        throw e;
      }
      spooky.start(url);
      spooky.then([
        {
          config: config,
          pages: pages
        }, function() {
          var buildFile, buildFileCSV, buildFileJSON, casper, loadMoreReviews, parseReviews;
          casper = this;
          casper.options.waitTimeout = 10000;
          casper.options.retryTimeout = 1000;
          casper.on('remote.message', function(message) {
            return casper.echo("browser: " + message);
          });
          casper.evaluate(function() {
            return window.jq = $.noConflict(true);
          });
          casper.waitFor(function() {
            return casper.evaluate(function() {
              console.log(window.jq("[role=option]").html());
              return (window.googlePlusParser !== void 0) && (window.jq("[role=option]").html() === "Latest");
            });
          }, (function(_this) {
            return function() {
              if (pages === -1 || pages > 1) {
                if (pages !== -1) {
                  pages -= 1;
                }
                return loadMoreReviews(parseReviews);
              } else {
                return parseReviews();
              }
            };
          })(this));
          parseReviews = function() {
            var data;
            data = casper.evaluate(function() {
              return window.googlePlusParser.parseReviews();
            });
            return buildFile(data);
          };
          loadMoreReviews = function(callback) {
            var nextBtnSelector, orderBtnSelector;
            if (pages === 0) {
              if (typeof callback === "function") {
                callback();
              }
              return;
            }
            if (pages !== -1) {
              pages -= 1;
            }
            console.log(".");
            orderBtnSelector = ".d-s.L5.r0";
            casper.click;
            nextBtnSelector = ".d-s.L5.r0";
            casper.click(nextBtnSelector);
            return casper.waitFor(function() {
              return casper.evaluate(function() {
                var buttonPanelSelector;
                buttonPanelSelector = '.R4.b2.gUb';
                return jq(buttonPanelSelector).first().css("display") === "none";
              });
            }, callback, function() {
              return loadMoreReviews(callback);
            });
          };
          buildFileJSON = function(data) {
            var fs, fullFilename;
            fs = require('fs');
            fullFilename = "./tmp/" + config.filename;
            return fs.write(fullFilename, JSON.stringify(data));
          };
          buildFileCSV = function(data) {
            var field, fields, fs, fullFilename, obj, objectValues, res, val, _i, _len;
            fs = require('fs');
            fields = ["rate", "ratingValue", "hasResponse", "username", "imageLink", "userLink", "content", "response", "time"];
            res = "" + (fields.join(',')) + "\n";
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              obj = data[_i];
              objectValues = (function() {
                var _j, _len1, _results;
                _results = [];
                for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
                  field = fields[_j];
                  val = obj[field] || "";
                  _results.push(val.toString().replace(/\s\s/g, "").replace(/\n|\r/g, "").replace(/,/g, ";"));
                }
                return _results;
              })();
              res += "" + (objectValues.join(',')) + "\n";
            }
            fullFilename = "./tmp/" + config.filename;
            console.log(fullFilename);
            return fs.write(fullFilename, res);
          };
          return buildFile = function(data) {
            if (config.json) {
              console.log("buildFile: JSON");
              return buildFileJSON(data);
            } else {
              console.log("buildFile: CSV");
              return buildFileCSV(data);
            }
          };
        }
      ]);
      return spooky.run();
    });
    spooky.on("error", function(e, stack) {
      console.error(e);
      if (stack) {
        return console.log(stack);
      }
    });
    spooky.on('console', function(line) {
      return console.log(line);
    });
    spooky.on("hello", function(greeting) {
      return console.log(greeting);
    });
    return spooky.on("log", function(log) {
      if (log.space === "remote") {
        return console.log(log.message.replace(RegExp(" \\- .*"), ""));
      }
    });
  };

}).call(this);
