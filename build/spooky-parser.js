// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(url) {
    var Spooky, spooky;
    Spooky = require("spooky");
    spooky = new Spooky({
      child: {
        transport: "http"
      },
      casper: {
        logLevel: "debug",
        verbose: true,
        clientScripts: ['bower_components/jquery/dist/jquery.js', 'build/parser.js']
      }
    }, function(err) {
      var e;
      if (err) {
        e = new Error("Failed to initialize SpookyJS");
        e.details = err;
        throw e;
      }
      spooky.start(url);
      spooky.then(function() {
        var buildFile, casper, loadMoreReviews, parseReviews;
        casper = this;
        casper.on('remote.message', function(message) {
          return casper.echo("browser: " + message);
        });
        casper.evaluate(function() {
          return window.jq = $.noConflict(true);
        });
        casper.waitFor(function() {
          return casper.evaluate(function() {
            return window.googlePlusParser !== void 0;
          });
        }, (function(_this) {
          return function() {
            return loadMoreReviews(parseReviews);
          };
        })(this));
        parseReviews = function() {
          var data;
          data = casper.evaluate(function() {
            return window.googlePlusParser.parseReviews();
          });
          return buildFile(data);
        };
        loadMoreReviews = function(callback) {
          var nextBtnSelector;
          console.log(".");
          nextBtnSelector = ".d-s.L5.r0";
          casper.click(nextBtnSelector);
          return casper.waitFor(function() {
            return casper.evaluate(function() {
              var buttonPanelSelector;
              buttonPanelSelector = '.R4.b2.gUb';
              return jq(buttonPanelSelector).first().css("display") === "none";
            });
          }, callback, function() {
            return loadMoreReviews(callback);
          });
        };
        return buildFile = function(data) {
          var field, fields, fs, fullFilename, obj, objectValues, res, val, _i, _len;
          fs = require('fs');
          fields = ["rate", "hasResponse", "username", "imageLink", "userLink", "content", "response"];
          res = "" + (fields.join(',')) + "\n";
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            obj = data[_i];
            objectValues = (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
                field = fields[_j];
                val = obj[field] || "";
                _results.push(val.toString().replace(/\s\s/g, "").replace(/\n|\r/g, "").replace(/,/g, ";"));
              }
              return _results;
            })();
            res += "" + (objectValues.join(",")) + "\n";
          }
          fullFilename = "./tmp/results.csv";
          return fs.write(fullFilename, res);
        };
      });
      return spooky.run();
    });
    spooky.on("error", function(e, stack) {
      console.error(e);
      if (stack) {
        return console.log(stack);
      }
    });
    spooky.on('console', function(line) {
      return console.log(line);
    });
    spooky.on("hello", function(greeting) {
      return console.log(greeting);
    });
    return spooky.on("log", function(log) {
      if (log.space === "remote") {
        return console.log(log.message.replace(RegExp(" \\- .*"), ""));
      }
    });
  };

}).call(this);
