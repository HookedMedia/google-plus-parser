// Generated by CoffeeScript 1.7.1
(function() {
  var ParserResults, buildFile, casper, init, loadMoreReviews, parseReviews, url;

  casper = require("casper").create({
    logLevel: "debug"
  });

  casper.on('remote.message', function(message) {
    return this.echo(message);
  });

  url = "https://plus.google.com/106797324517565881930/about?hl=en-US";

  ParserResults = [];

  init = function() {
    casper.start(url);
    casper.then(function() {
      this.page.injectJs('bower_components/jquery/dist/jquery.js');
      this.page.injectJs('build/parser.js');
      this.evaluate(function() {
        return window.jq = $.noConflict(true);
      });
      return casper.waitFor(function() {
        return casper.evaluate(function() {
          return window.googlePlusParser !== void 0;
        });
      }, function() {
        return loadMoreReviews(parseReviews);
      });
    });
    return casper.run();
  };

  parseReviews = function() {
    var data;
    data = casper.evaluate(function() {
      return window.googlePlusParser.parseReviews();
    });
    return buildFile(data);
  };

  loadMoreReviews = function(callback) {
    var nextBtnSelector;
    console.log(".");
    nextBtnSelector = ".d-s.L5.r0";
    casper.click(nextBtnSelector);
    return casper.waitFor(function() {
      return this.evaluate(function() {
        var buttonPanelSelector;
        buttonPanelSelector = '.R4.b2.gUb';
        return jq(buttonPanelSelector).first().css("display") === "none";
      });
    }, callback, function() {
      return loadMoreReviews(callback);
    });
  };

  buildFile = function(data) {
    var field, fields, fs, obj, objectValues, res, val, _i, _len;
    fs = require('fs');
    fields = ["rate", "hasResponse", "username", "imageLink", "userLink", "content", "response"];
    res = "" + (fields.join(';')) + "\n";
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      obj = data[_i];
      objectValues = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
          field = fields[_j];
          val = obj[field] || "";
          _results.push(val.toString().replace(/\s\s/g, "").replace(/\n|\r/g, "").replace(/;/g, ""));
        }
        return _results;
      })();
      res += "" + (objectValues.join(';')) + "\n";
    }
    return fs.write("results.csv", res);
  };

  init();

}).call(this);
